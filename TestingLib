local ModernUI = {}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

-- Constants
local TWEEN_SPEED = 0.25
local CORNER_RADIUS = UDim.new(0, 6)
local FONT = Enum.Font.GothamMedium
local FONT_SIZE = 14
local PADDING = 10

-- Default theme
local DefaultTheme = {
    Background = Color3.fromRGB(30, 30, 30),
    Foreground = Color3.fromRGB(50, 50, 50),
    Text = Color3.fromRGB(255, 255, 255),
    Accent = Color3.fromRGB(85, 0, 255),
    Error = Color3.fromRGB(255, 0, 0),
    Success = Color3.fromRGB(0, 255, 0),
}

-- Utility functions
local function CreateInstance(instanceType, properties)
    local instance = Instance.new(instanceType)
    for k, v in pairs(properties) do
        instance[k] = v
    end
    return instance
end

local function AddCorners(instance, radius)
    local uiCorner = CreateInstance("UICorner", {
        CornerRadius = radius or CORNER_RADIUS,
        Parent = instance
    })
    return uiCorner
end

local function CreateTween(instance, properties, duration, easingStyle, easingDirection)
    local tween = TweenService:Create(
        instance,
        TweenInfo.new(duration or TWEEN_SPEED, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out),
        properties
    )
    return tween
end

local function MakeDraggable(frame, handle)
    local dragging, dragInput, dragStart, startPos

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- Main library functions
function ModernUI:CreateWindow(options)
    options = options or {}
    local title = options.Title or "Modern UI"
    local size = options.Size or UDim2.fromOffset(600, 400)
    local theme = options.Theme or DefaultTheme
    local position = options.Position or UDim2.fromScale(0.5, 0.5)

    -- Create main GUI
    local ScreenGui = CreateInstance("ScreenGui", {
        Name = "ModernUI_" .. title:gsub("%s+", ""),
        Parent = game.CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })

    -- Main frame
    local MainFrame = CreateInstance("Frame", {
        Name = "MainFrame",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = theme.Background,
        Position = position,
        Size = size,
        Parent = ScreenGui
    })

    AddCorners(MainFrame)

    -- Top bar
    local TopBar = CreateInstance("Frame", {
        Name = "TopBar",
        BackgroundColor3 = theme.Foreground,
        Size = UDim2.new(1, 0, 0, 40),
        Parent = MainFrame
    })

    AddCorners(TopBar)

    -- Title
    local TitleLabel = CreateInstance("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.fromOffset(15, 0),
        Size = UDim2.new(1, -130, 1, 0),
        Font = FONT,
        Text = title,
        TextColor3 = theme.Text,
        TextSize = FONT_SIZE + 2,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TopBar
    })

    -- Close button
    local CloseButton = CreateInstance("TextButton", {
        Name = "CloseButton",
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = theme.Error,
        Position = UDim2.new(1, -10, 0.5, 0),
        Size = UDim2.fromOffset(24, 24),
        Text = "",
        Parent = TopBar
    })

    AddCorners(CloseButton, UDim.new(1, 0))

    -- Minimize button
    local MinimizeButton = CreateInstance("TextButton", {
        Name = "MinimizeButton",
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = theme.Accent,
        Position = UDim2.new(1, -44, 0.5, 0),
        Size = UDim2.fromOffset(24, 24),
        Text = "",
        Parent = TopBar
    })

    AddCorners(MinimizeButton, UDim.new(1, 0))

    -- Container for tabs and content
    local Container = CreateInstance("Frame", {
        Name = "Container",
        BackgroundColor3 = theme.Background,
        Position = UDim2.fromOffset(0, 40),
        Size = UDim2.new(1, 0, 1, -40),
        Parent = MainFrame
    })

    AddCorners(Container)

    -- Tab container
    local TabContainer = CreateInstance("Frame", {
        Name = "TabContainer",
        BackgroundColor3 = theme.Foreground,
        Size = UDim2.new(0.25, 0, 1, 0),
        Parent = Container
    })

    AddCorners(TabContainer)

    -- Tab list
    local TabList = CreateInstance("ScrollingFrame", {
        Name = "TabList",
        Active = true,
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.fromOffset(0, 10),
        Size = UDim2.new(1, 0, 1, -10),
        CanvasSize = UDim2.fromOffset(0, 0),
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = theme.Accent,
        Parent = TabContainer
    })

    local TabListLayout = CreateInstance("UIListLayout", {
        Padding = UDim.new(0, 5),
        HorizontalAlignment = Enum.HorizontalAlignment.Center,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = TabList
    })

    -- Content container
    local ContentContainer = CreateInstance("Frame", {
        Name = "ContentContainer",
        BackgroundTransparency = 1,
        Position = UDim2.new(0.25, 0, 0, 0),
        Size = UDim2.new(0.75, 0, 1, 0),
        Parent = Container
    })

    -- Window functionality
    local Window = {}
    Window.Tabs = {}
    Window.ActiveTab = nil
    Window.Minimized = false

    -- Make window draggable
    MakeDraggable(MainFrame, TopBar)

    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    -- Minimize button functionality
    MinimizeButton.MouseButton1Click:Connect(function()
        Window.Minimized = not Window.Minimized

        if Window.Minimized then
            CreateTween(Container, {Size = UDim2.new(1, 0, 0, 0)}):Play()
            CreateTween(MainFrame, {Size = UDim2.new(size.X.Scale, size.X.Offset, 0, 40)}):Play()
        else
            CreateTween(Container, {Size = UDim2.new(1, 0, 1, -40)}):Play()
            CreateTween(MainFrame, {Size = size}):Play()
        end
    end)

    -- Create a new tab
    function Window:CreateTab(name, icon)
        local tab = {}

        local TabButton = CreateInstance("TextButton", {
            Name = name,
            BackgroundColor3 = theme.Foreground,
            Size = UDim2.new(1, -20, 0, 30),
            Font = FONT,
            Text = name,
            TextColor3 = theme.Text,
            TextSize = FONT_SIZE,
            Parent = TabList
        })

        AddCorners(TabButton)

        local TabContent = CreateInstance("ScrollingFrame", {
            Name = name,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.fromOffset(0, 0),
            ScrollBarThickness = 2,
            ScrollBarImageColor3 = theme.Accent,
            Visible = false,
            Parent = ContentContainer
        })

        local ContentLayout = CreateInstance("UIListLayout", {
            Padding = UDim.new(0, 10),
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = TabContent
        })

        TabButton.MouseButton1Click:Connect(function()
            if Window.ActiveTab then
                Window.ActiveTab.Content.Visible = false
                CreateTween(Window.ActiveTab.Button, {BackgroundColor3 = theme.Foreground}):Play()
            end
            Window.ActiveTab = tab
            TabContent.Visible = true
            CreateTween(TabButton, {BackgroundColor3 = theme.Accent}):Play()
        end)

        tab.Button = TabButton
        tab.Content = TabContent

        table.insert(Window.Tabs, tab)

        if #Window.Tabs == 1 then
            Window.ActiveTab = tab
            TabContent.Visible = true
            CreateTween(TabButton, {BackgroundColor3 = theme.Accent}):Play()
        end

        -- Tab functionality
        function tab:AddToggle(name, default, callback)
            local toggle = CreateInstance("Frame", {
                Name = name,
                BackgroundColor3 = theme.Foreground,
                Size = UDim2.new(1, -20, 0, 30),
                Parent = TabContent
            })

            AddCorners(toggle)

            local ToggleLabel = CreateInstance("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(10, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Font = FONT,
                Text = name,
                TextColor3 = theme.Text,
                TextSize = FONT_SIZE,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = toggle
            })

            local ToggleButton = CreateInstance("TextButton", {
                Name = "Button",
                AnchorPoint = Vector2.new(1, 0.5),
                BackgroundColor3 = default and theme.Accent or theme.Error,
                Position = UDim2.new(1, -10, 0.5, 0),
                Size = UDim2.fromOffset(40, 20),
                Text = "",
                Parent = toggle
            })

            AddCorners(ToggleButton, UDim.new(1, 0))

            local ToggleCircle = CreateInstance("Frame", {
                Name = "Circle",
                AnchorPoint = Vector2.new(0, 0.5),
                BackgroundColor3 = theme.Text,
                Position = UDim2.new(default and 1 or 0, default and -18 or 2, 0.5, 0),
                Size = UDim2.fromOffset(16, 16),
                Parent = ToggleButton
            })

            AddCorners(ToggleCircle, UDim.new(1, 0))

            local toggled = default or false

            ToggleButton.MouseButton1Click:Connect(function()
                toggled = not toggled
                CreateTween(ToggleCircle, {Position = toggled and UDim2.new(1, -18, 0.5, 0) or UDim2.new(0, 2, 0.5, 0)}):Play()
                CreateTween(ToggleButton, {BackgroundColor3 = toggled and theme.Accent or theme.Error}):Play()
                if callback then callback(toggled) end
            end)

            return toggle
        end

        function tab:AddSlider(name, min, max, default, callback)
            local slider = CreateInstance("Frame", {
                Name = name,
                BackgroundColor3 = theme.Foreground,
                Size = UDim2.new(1, -20, 0, 50),
                Parent = TabContent
            })

            AddCorners(slider)

            local SliderLabel = CreateInstance("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(10, 5),
                Size = UDim2.new(1, -20, 0, 20),
                Font = FONT,
                Text = name,
                TextColor3 = theme.Text,
                TextSize = FONT_SIZE,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = slider
            })

            local SliderFrame = CreateInstance("Frame", {
                Name = "SliderFrame",
                BackgroundColor3 = theme.Background,
                Position = UDim2.new(0, 10, 0, 30),
                Size = UDim2.new(1, -20, 0, 10),
                Parent = slider
            })

            AddCorners(SliderFrame)

            local SliderFill = CreateInstance("Frame", {
                Name = "Fill",
                BackgroundColor3 = theme.Accent,
                Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
                Parent = SliderFrame
            })

            AddCorners(SliderFill)

            local SliderValue = CreateInstance("TextLabel", {
                Name = "Value",
                BackgroundTransparency = 1,
                Position = UDim2.new(1, -30, 0, 5),
                Size = UDim2.new(0, 20, 0, 20),
                Font = FONT,
                Text = tostring(default),
                TextColor3 = theme.Text,
                TextSize = FONT_SIZE,
                Parent = slider
            })

            local isDragging = false
            local value = default

            local function updateSlider(input)
                local sizeX = math.clamp((input.Position.X - SliderFrame.AbsolutePosition.X) / SliderFrame.AbsoluteSize.X, 0, 1)
                value = math.floor(min + (max - min) * sizeX)
                CreateTween(SliderFill, {Size = UDim2.new(sizeX, 0, 1, 0)}):Play()
                SliderValue.Text = tostring(value)
                if callback then callback(value) end
            end

            SliderFrame.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = true
                    updateSlider(input)
                end
            end)

            SliderFrame.InputEnded:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    isDragging = false
                end
            end)

            UserInputService.InputChanged:Connect(function(input)
                if isDragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(input)
                end
            end)

            return slider
        end

        function tab:AddDropdown(name, options, default, callback)
            local dropdown = CreateInstance("Frame", {
                Name = name,
                BackgroundColor3 = theme.Foreground,
                Size = UDim2.new(1, -20, 0, 30),
                Parent = TabContent
            })

            AddCorners(dropdown)

            local DropdownLabel = CreateInstance("TextLabel", {
                Name = "Label",
                BackgroundTransparency = 1,
                Position = UDim2.fromOffset(10, 0),
                Size = UDim2.new(1, -50, 1, 0),
                Font = FONT,
                Text = name,
                TextColor3 = theme.Text,
                TextSize = FONT_SIZE,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = dropdown
            })

            local DropdownButton = CreateInstance("TextButton", {
                Name = "Button",
                AnchorPoint = Vector2.new(1, 0.5),
                BackgroundColor3 = theme.Background,
                Position = UDim2.new(1, -10, 0.5, 0),
                Size = UDim2.new(0, 100, 0, 20),
                Font = FONT,
                Text = default or "Select",
                TextColor3 = theme.Text,
                TextSize = FONT_SIZE,
                Parent = dropdown
            })

            AddCorners(DropdownButton)

            local DropdownList = CreateInstance("Frame", {
                Name = "List",
                BackgroundColor3 = theme.Background,
                Position = UDim2.new(1, -110, 1, 5),
                Size = UDim2.new(0, 100, 0, #options * 25),
                Visible = false,
                Parent = dropdown
            })

            AddCorners(DropdownList)

            for i, option in ipairs(options) do
                local OptionButton = CreateInstance("TextButton", {
                    Name = option,
                    BackgroundColor3 = theme.Foreground,
                    Size = UDim2.new(1, 0, 0, 25),
                    Position = UDim2.new(0, 0, 0, (i - 1) * 25),
                    Font = FONT,
                    Text = option,
                    TextColor3 = theme.Text,
                    TextSize = FONT_SIZE,
                    Parent = DropdownList
                })

                AddCorners(OptionButton)

                OptionButton.MouseButton1Click:Connect(function()
                    DropdownButton.Text = option
                    DropdownList.Visible = false
                    if callback then callback(option) end
                end)
            end

            DropdownButton.MouseButton1Click:Connect(function()
                DropdownList.Visible = not DropdownList.Visible
            end)

            return dropdown
        end

        return tab
    end

    return Window
end

return ModernUI
