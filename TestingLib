local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local AdvancedUI = {}
AdvancedUI.__index = AdvancedUI

local COLORS = {
    Background = Color3.fromRGB(30, 30, 30),
    Accent = Color3.fromRGB(60, 60, 60),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(200, 200, 200),
    Button = Color3.fromRGB(40, 40, 40),
    ButtonHover = Color3.fromRGB(50, 50, 50),
    Slider = Color3.fromRGB(0, 170, 255),
    SliderBackground = Color3.fromRGB(40, 40, 40),
    Toggle = Color3.fromRGB(0, 170, 255),
    ToggleBackground = Color3.fromRGB(40, 40, 40),
    Dropdown = Color3.fromRGB(40, 40, 40),
    DropdownItem = Color3.fromRGB(50, 50, 50),
    Notification = Color3.fromRGB(30, 30, 30),
}

local function createInstance(className, properties)
    local instance = Instance.new(className)
    for k, v in pairs(properties) do
        instance[k] = v
    end
    return instance
end

local function Tween(instance, properties, duration, style, direction)
    local tween = TweenService:Create(instance, TweenInfo.new(duration, style or Enum.EasingStyle.Quad, direction or Enum.EasingDirection.Out), properties)
    tween:Play()
    return tween
end

function AdvancedUI.new(title)
    local self = setmetatable({}, AdvancedUI)

    self.ScreenGui = createInstance("ScreenGui", {
        Name = "AdvancedUI",
        Parent = game.CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    })

    self.MainFrame = createInstance("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0, 500, 0, 350),
        Position = UDim2.new(0.5, -250, 0.5, -175),
        BackgroundColor3 = COLORS.Background,
        BorderSizePixel = 0,
        Parent = self.ScreenGui
    })

    local cornerRadius = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = self.MainFrame
    })

    self.TitleBar = createInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = COLORS.Accent,
        BorderSizePixel = 0,
        Parent = self.MainFrame
    })

    local titleBarCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = self.TitleBar
    })

    self.TitleLabel = createInstance("TextLabel", {
        Name = "TitleLabel",
        Size = UDim2.new(1, -40, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = COLORS.Text,
        TextSize = 18,
        Font = Enum.Font.GothamBold,
        Text = title or "Advanced UI",
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = self.TitleBar
    })

    self.CloseButton = createInstance("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -35, 0, 5),
        BackgroundColor3 = Color3.fromRGB(255, 80, 80),
        Text = "X",
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        Parent = self.TitleBar
    })

    local closeButtonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 15),
        Parent = self.CloseButton
    })

    self.TabContainer = createInstance("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(0, 120, 1, -40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = COLORS.Accent,
        BorderSizePixel = 0,
        Parent = self.MainFrame
    })

    local tabContainerCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = self.TabContainer
    })

    self.TabContent = createInstance("Frame", {
        Name = "TabContent",
        Size = UDim2.new(1, -130, 1, -50),
        Position = UDim2.new(0, 125, 0, 45),
        BackgroundTransparency = 1,
        Parent = self.MainFrame
    })

    self.Tabs = {}
    self.ActiveTab = nil

    -- Make the UI draggable
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        self.MainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    self.TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = self.MainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    self.TitleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    self.CloseButton.MouseButton1Click:Connect(function()
        self.ScreenGui:Destroy()
    end)

    return self
end

function AdvancedUI:AddTab(name)
    local tabButton = createInstance("TextButton", {
        Name = name .. "Tab",
        Size = UDim2.new(1, -10, 0, 30),
        Position = UDim2.new(0, 5, 0, #self.Tabs * 35 + 5),
        BackgroundColor3 = COLORS.Button,
        Text = name,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Parent = self.TabContainer
    })

    local tabButtonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = tabButton
    })

    local tabContent = createInstance("ScrollingFrame", {
        Name = name .. "Content",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 4,
        Visible = false,
        Parent = self.TabContent
    })

    local contentList = createInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = tabContent
    })

    local tab = {
        Button = tabButton,
        Content = tabContent
    }

    table.insert(self.Tabs, tab)

    tabButton.MouseButton1Click:Connect(function()
        self:SelectTab(tab)
    end)

    if #self.Tabs == 1 then
        self:SelectTab(tab)
    end

    return tab
end

function AdvancedUI:SelectTab(tab)
    if self.ActiveTab then
        self.ActiveTab.Button.BackgroundColor3 = COLORS.Button
        self.ActiveTab.Content.Visible = false
    end

    tab.Button.BackgroundColor3 = COLORS.ButtonHover
    tab.Content.Visible = true
    self.ActiveTab = tab
end

function AdvancedUI:AddButton(tab, text, callback)
    local button = createInstance("TextButton", {
        Name = text .. "Button",
        Size = UDim2.new(1, -20, 0, 30),
        BackgroundColor3 = COLORS.Button,
        Text = text,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Parent = tab.Content
    })

    local buttonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = button
    })

    button.MouseButton1Click:Connect(callback)

    button.MouseEnter:Connect(function()
        Tween(button, {BackgroundColor3 = COLORS.ButtonHover}, 0.2)
    end)

    button.MouseLeave:Connect(function()
        Tween(button, {BackgroundColor3 = COLORS.Button}, 0.2)
    end)

    return button
end

function AdvancedUI:AddSlider(tab, text, min, max, default, callback)
    local sliderContainer = createInstance("Frame", {
        Name = text .. "SliderContainer",
        Size = UDim2.new(1, -20, 0, 50),
        BackgroundTransparency = 1,
        Parent = tab.Content
    })

    local sliderLabel = createInstance("TextLabel", {
        Name = "SliderLabel",
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = sliderContainer
    })

    local sliderBackground = createInstance("Frame", {
        Name = "SliderBackground",
        Size = UDim2.new(1, 0, 0, 5),
        Position = UDim2.new(0, 0, 0, 25),
        BackgroundColor3 = COLORS.SliderBackground,
        Parent = sliderContainer
    })

    local sliderFill = createInstance("Frame", {
        Name = "SliderFill",
        Size = UDim2.new(0, 0, 1, 0),
        BackgroundColor3 = COLORS.Slider,
        Parent = sliderBackground
    })

    local sliderValue = createInstance("TextLabel", {
        Name = "SliderValue",
        Size = UDim2.new(0, 50, 0, 20),
        Position = UDim2.new(1, -50, 0, 0),
        BackgroundTransparency = 1,
        Text = tostring(default),
        TextColor3 = COLORS.SubText,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = sliderContainer
    })

    local function updateSlider(value)
        value = math.clamp(value, min, max)
        local percent = (value - min) / (max - min)
        sliderFill.Size = UDim2.new(percent, 0, 1, 0)
        sliderValue.Text = tostring(math.floor(value))
        callback(value)
    end

    updateSlider(default)

    local dragging = false

    sliderBackground.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)

    sliderBackground.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local percent = math.clamp((input.Position.X - sliderBackground.AbsolutePosition.X) / sliderBackground.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * percent
            updateSlider(value)
        end
    end)

    return sliderContainer
end

function AdvancedUI:AddToggle(tab, text, default, callback)
    local toggleContainer = createInstance("Frame", {
        Name = text .. "ToggleContainer",
        Size = UDim2.new(1, -20, 0, 30),
        BackgroundTransparency = 1,
        Parent = tab.Content
    })

    local toggleLabel = createInstance("TextLabel", {
        Name = "ToggleLabel",
        Size = UDim2.new(1, -50, 1, 0),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = toggleContainer
    })

    local toggleButton = createInstance("Frame", {
        Name = "ToggleButton",
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, -40, 0.5, -10),
        BackgroundColor3 = COLORS.ToggleBackground,
        Parent = toggleContainer
    })

    local toggleButtonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = toggleButton
    })

    local toggleIndicator = createInstance("Frame", {
        Name = "ToggleIndicator",
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new(0, 2, 0.5, -8),
        BackgroundColor3 = COLORS.ToggleIndicator,
        Parent = toggleButton
    })

    local toggleIndicatorCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = toggleIndicator
    })

    local toggled = default or false

    local function updateToggle()
        if toggled then
            Tween(toggleIndicator, {Position = UDim2.new(1, -18, 0.5, -8)}, 0.2)
            Tween(toggleButton, {BackgroundColor3 = COLORS.ToggleEnabled}, 0.2)
        else
            Tween(toggleIndicator, {Position = UDim2.new(0, 2, 0.5, -8)}, 0.2)
            Tween(toggleButton, {BackgroundColor3 = COLORS.ToggleBackground}, 0.2)
        end
        callback(toggled)
    end

    toggleButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggled = not toggled
            updateToggle()
        end
    end)

    updateToggle()

    return toggleContainer
end

function AdvancedUI:AddDropdown(tab, text, options, default, callback)
    local dropdownContainer = createInstance("Frame", {
        Name = text .. "DropdownContainer",
        Size = UDim2.new(1, -20, 0, 30),
        BackgroundTransparency = 1,
        Parent = tab.Content
    })

    local dropdownLabel = createInstance("TextLabel", {
        Name = "DropdownLabel",
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        Text = text,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = dropdownContainer
    })

    local dropdownButton = createInstance("TextButton", {
        Name = "DropdownButton",
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, 20),
        BackgroundColor3 = COLORS.Button,
        Text = default or "Select...",
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Parent = dropdownContainer
    })

    local dropdownButtonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = dropdownButton
    })

    local dropdownList = createInstance("Frame", {
        Name = "DropdownList",
        Size = UDim2.new(1, 0, 0, 0),
        Position = UDim2.new(0, 0, 1, 0),
        BackgroundColor3 = COLORS.Background,
        ClipsDescendants = true,
        Visible = false,
        Parent = dropdownButton
    })

    local dropdownListCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 5),
        Parent = dropdownList
    })

    local dropdownListLayout = createInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Parent = dropdownList
    })

    local function updateDropdown(selected)
        dropdownButton.Text = selected
        callback(selected)
    end

    local function toggleDropdown()
        dropdownList.Visible = not dropdownList.Visible
        if dropdownList.Visible then
            Tween(dropdownList, {Size = UDim2.new(1, 0, 0, #options * 30)}, 0.2)
        else
            Tween(dropdownList, {Size = UDim2.new(1, 0, 0, 0)}, 0.2)
        end
    end

    for i, option in ipairs(options) do
        local optionButton = createInstance("TextButton", {
            Name = option .. "Option",
            Size = UDim2.new(1, 0, 0, 30),
            BackgroundColor3 = COLORS.Button,
            Text = option,
            TextColor3 = COLORS.Text,
            TextSize = 14,
            Font = Enum.Font.GothamSemibold,
            Parent = dropdownList
        })

        optionButton.MouseButton1Click:Connect(function()
            updateDropdown(option)
            toggleDropdown()
        end)
    end

    dropdownButton.MouseButton1Click:Connect(toggleDropdown)

    if default then
        updateDropdown(default)
    end

    return dropdownContainer
end

return AdvancedUI
