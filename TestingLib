local ModernUI = {}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Utility functions
local function createInstance(className, properties)
    local instance = Instance.new(className)
    for k, v in pairs(properties) do
        instance[k] = v
    end
    return instance
end

local function tween(instance, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(duration or 0.3, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out)
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Main UI creation function
function ModernUI.createUI(title)
    local screenGui = createInstance("ScreenGui", {
        Name = "ModernUI",
        Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    })

    local mainFrame = createInstance("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0, 400, 0, 300),
        Position = UDim2.new(0.5, -200, 0.5, -150),
        BackgroundColor3 = Color3.fromRGB(30, 30, 30),
        BorderSizePixel = 0,
        Parent = screenGui
    })

    local titleBar = createInstance("TextLabel", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18,
        Font = Enum.Font.SourceSansBold,
        Text = title or "Modern UI",
        Parent = mainFrame
    })

    -- Make the UI draggable
    local dragging
    local dragInput
    local dragStart
    local startPos

    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    return {
        ScreenGui = screenGui,
        MainFrame = mainFrame,
        TitleBar = titleBar
    }
end

-- Notification system
function ModernUI.createNotification(parent, message, style, duration)
    local notification = createInstance("Frame", {
        Name = "Notification",
        Size = UDim2.new(0, 200, 0, 50),
        Position = UDim2.new(1, -220, 1, -70),
        BackgroundColor3 = (style == "success" and Color3.fromRGB(46, 204, 113)) or
                           (style == "error" and Color3.fromRGB(231, 76, 60)) or
                           Color3.fromRGB(52, 152, 219),
        BorderSizePixel = 0,
        Parent = parent
    })

    local messageLabel = createInstance("TextLabel", {
        Name = "Message",
        Size = UDim2.new(1, -10, 1, -10),
        Position = UDim2.new(0, 5, 0, 5),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 14,
        Font = Enum.Font.SourceSans,
        Text = message,
        TextWrapped = true,
        Parent = notification
    })

    tween(notification, {Position = UDim2.new(1, -220, 1, -70)}, 0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

    if duration then
        delay(duration, function()
            tween(notification, {Position = UDim2.new(1, 20, 1, -70)}, 0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.In).Completed:Connect(function()
                notification:Destroy()
            end)
        end)
    end

    return notification
end

-- Tabs system
function ModernUI.createTabs(parent)
    local tabContainer = createInstance("Frame", {
        Name = "TabContainer",
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = Color3.fromRGB(40, 40, 40),
        BorderSizePixel = 0,
        Parent = parent
    })

    local contentContainer = createInstance("Frame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, 0, 1, -60),
        Position = UDim2.new(0, 0, 0, 60),
        BackgroundTransparency = 1,
        Parent = parent
    })

    local tabs = {}

    local function createTab(name)
        local tabButton = createInstance("TextButton", {
            Name = name .. "Tab",
            Size = UDim2.new(0, 100, 1, 0),
            BackgroundColor3 = Color3.fromRGB(50, 50, 50),
            TextColor3 = Color3.fromRGB(200, 200, 200),
            TextSize = 14,
            Font = Enum.Font.SourceSans,
            Text = name,
            Parent = tabContainer
        })

        local content = createInstance("Frame", {
            Name = name .. "Content",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            Visible = false,
            Parent = contentContainer
        })

        table.insert(tabs, {Button = tabButton, Content = content})

        tabButton.MouseButton1Click:Connect(function()
            for _, tab in ipairs(tabs) do
                tab.Content.Visible = (tab.Button == tabButton)
                tween(tab.Button, {BackgroundColor3 = (tab.Button == tabButton) and Color3.fromRGB(60, 60, 60) or Color3.fromRGB(50, 50, 50)}, 0.2)
            end
        end)

        return content
    end

    return createTab
end

-- Toggle button
function ModernUI.createToggle(parent, text, callback)
    local toggle = createInstance("Frame", {
        Name = "Toggle",
        Size = UDim2.new(0, 200, 0, 30),
        BackgroundTransparency = 1,
        Parent = parent
    })

    local label = createInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(0, 150, 1, 0),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 14,
        Font = Enum.Font.SourceSans,
        Text = text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = toggle
    })

    local switch = createInstance("Frame", {
        Name = "Switch",
        Size = UDim2.new(0, 40, 0, 20),
        Position = UDim2.new(1, -40, 0.5, -10),
        BackgroundColor3 = Color3.fromRGB(200, 200, 200),
        BorderSizePixel = 0,
        Parent = toggle
    })

    local handle = createInstance("Frame", {
        Name = "Handle",
        Size = UDim2.new(0, 18, 0, 18),
        Position = UDim2.new(0, 1, 0.5, -9),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Parent = switch
    })

    local toggled = false

    switch.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggled = not toggled
            tween(handle, {Position = toggled and UDim2.new(1, -19, 0.5, -9) or UDim2.new(0, 1, 0.5, -9)}, 0.2)
            tween(switch, {BackgroundColor3 = toggled and Color3.fromRGB(0, 170, 255) or Color3.fromRGB(200, 200, 200)}, 0.2)
            if callback then callback(toggled) end
        end
    end)

    return toggle
end

-- Slider
function ModernUI.createSlider(parent, text, min, max, default, callback)
    local slider = createInstance("Frame", {
        Name = "Slider",
        Size = UDim2.new(0, 200, 0, 50),
        BackgroundTransparency = 1,
        Parent = parent
    })

    local label = createInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(1, 0, 0, 20),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 14,
        Font = Enum.Font.SourceSans,
        Text = text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = slider
    })

    local sliderBar = createInstance("Frame", {
        Name = "SliderBar",
        Size = UDim2.new(1, 0, 0, 4),
        Position = UDim2.new(0, 0, 0.5, 10),
        BackgroundColor3 = Color3.fromRGB(100, 100, 100),
        BorderSizePixel = 0,
        Parent = slider
    })

    local handle = createInstance("Frame", {
        Name = "Handle",
        Size = UDim2.new(0, 10, 0, 20),
        Position = UDim2.new(0, 0, 0.5, 2),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BorderSizePixel = 0,
        Parent = sliderBar
    })

    local valueLabel = createInstance("TextLabel", {
        Name = "Value",
        Size = UDim2.new(0, 50, 0, 20),
        Position = UDim2.new(1, -50, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = Color3.fromRGB(200, 200, 200),
        TextSize = 14,
        Font = Enum.Font.SourceSans,
        Text = tostring(default),
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = slider
    })

    local function updateSlider(input)
        local pos = math.clamp((input.Position.X - sliderBar.AbsolutePosition.X) / sliderBar.AbsoluteSize.X, 0, 1)
        local value = math.floor(min + (max - min) * pos)
        handle.Position = UDim2.new(pos, -5, 0.5, 2)
        valueLabel.Text = tostring(value)
        if callback then callback(value) end
    end

    sliderBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            updateSlider(input)
            local connection
            connection = UserInputService.InputChanged:Connect(function(changedInput)
                if changedInput.UserInputType == Enum.UserInputType.MouseMovement then
                    updateSlider(changedInput)
                end
            end)
            UserInputService.InputEnded:Connect(function(endedInput)
                if endedInput.UserInputType == Enum.UserInputType.MouseButton1 then
                    connection:Disconnect()
                end
            end)
        end
    end)

    return slider
end

return ModernUI
