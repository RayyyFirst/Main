--// NebulaLib \\--

local NebulaUI = {}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local CoreGui = game:GetService("CoreGui")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Color palette
local COLORS = {
    Background = Color3.fromRGB(20, 20, 20),
    BackgroundDarker = Color3.fromRGB(15, 15, 15),
    Accent = Color3.fromRGB(130, 100, 255),
    AccentDarker = Color3.fromRGB(100, 70, 220),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(180, 180, 180),
    TabSelected = Color3.fromRGB(40, 40, 40),
    TabUnselected = Color3.fromRGB(25, 25, 25),
    Toggle = Color3.fromRGB(130, 100, 255),
    ToggleOff = Color3.fromRGB(60, 60, 60),
    Slider = Color3.fromRGB(130, 100, 255),
    SliderBackground = Color3.fromRGB(40, 40, 40),
    Dropdown = Color3.fromRGB(30, 30, 30),
    DropdownOption = Color3.fromRGB(40, 40, 40),
    InputBox = Color3.fromRGB(30, 30, 30),
    Notification = Color3.fromRGB(30, 30, 30),
    NotificationSuccess = Color3.fromRGB(0, 255, 100),
    NotificationError = Color3.fromRGB(255, 50, 50),
    NotificationInfo = Color3.fromRGB(100, 200, 255)
}

-- Utility functions
local function createInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function tween(instance, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(
        duration or 0.3,
        easingStyle or Enum.EasingStyle.Quad,
        easingDirection or Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

local function rippleEffect(button)
    local ripple = createInstance("Frame", {
        Name = "Ripple",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        BackgroundTransparency = 0.7,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(0, 0, 0, 0),
        Parent = button
    })
    
    local corner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = ripple
    })
    
    local targetSize = UDim2.new(1.5, 0, 1.5, 0)
    tween(ripple, {Size = targetSize, BackgroundTransparency = 1}, 0.5)
    
    delay(0.5, function()
        ripple:Destroy()
    end)
end

-- Main UI creation function
function NebulaUI.new(title)
    local screenGui = createInstance("ScreenGui", {
        Name = "NebulaUI",
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })

    local mainFrame = createInstance("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0, 700, 0, 400),
        Position = UDim2.new(0.5, -350, 0.5, -200),
        BackgroundColor3 = COLORS.Background,
        BorderSizePixel = 0,
        Parent = screenGui
    })

    local shadow = createInstance("ImageLabel", {
        Name = "Shadow",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, 40, 1, 40),
        ZIndex = 0,
        Image = "rbxassetid://6014261993",
        ImageColor3 = Color3.fromRGB(0, 0, 0),
        ImageTransparency = 0.5,
        Parent = mainFrame
    })

    local cornerRadius = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = mainFrame
    })

    local titleBar = createInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = COLORS.BackgroundDarker,
        BorderSizePixel = 0,
        Parent = mainFrame
    })

    local titleBarCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = titleBar
    })

    local titleBarFix = createInstance("Frame", {
        Name = "TitleBarFix",
        Size = UDim2.new(1, 0, 0, 10),
        Position = UDim2.new(0, 0, 1, -10),
        BackgroundColor3 = COLORS.BackgroundDarker,
        BorderSizePixel = 0,
        ZIndex = 0,
        Parent = titleBar
    })

    local titleLabel = createInstance("TextLabel", {
        Name = "TitleLabel",
        Size = UDim2.new(0, 200, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = COLORS.Accent,
        TextSize = 18,
        Font = Enum.Font.GothamBold,
        Text = title or "nebulatech",
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = titleBar
    })

    local closeButton = createInstance("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -35, 0, 5),
        BackgroundColor3 = Color3.fromRGB(255, 70, 70),
        Text = "",
        Parent = titleBar
    })

    local closeButtonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 15),
        Parent = closeButton
    })

    local closeIcon = createInstance("ImageLabel", {
        Name = "CloseIcon",
        Size = UDim2.new(0.6, 0, 0.6, 0),
        Position = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Image = "rbxassetid://7072725342",
        ImageColor3 = Color3.fromRGB(255, 255, 255),
        Parent = closeButton
    })

    closeButton.MouseButton1Click:Connect(function()
        tween(mainFrame, {Position = UDim2.new(0.5, -350, 1.5, 0)}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In)
        wait(0.5)
        screenGui:Destroy()
    end)

    -- Make the UI draggable
    local dragging, dragInput, dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    -- Content area
    local sideBar = createInstance("Frame", {
        Name = "SideBar",
        Size = UDim2.new(0, 150, 1, -40),
        Position = UDim2.new(0, 0, 0, 40),
        BackgroundColor3 = COLORS.BackgroundDarker,
        BorderSizePixel = 0,
        Parent = mainFrame
    })

    local sideBarCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = sideBar
    })

    local sideBarFix = createInstance("Frame", {
        Name = "SideBarFix",
        Size = UDim2.new(0, 10, 1, 0),
        Position = UDim2.new(1, -10, 0, 0),
        BackgroundColor3 = COLORS.BackgroundDarker,
        BorderSizePixel = 0,
        ZIndex = 0,
        Parent = sideBar
    })

    local tabButtonsHolder = createInstance("ScrollingFrame", {
        Name = "TabButtonsHolder",
        Size = UDim2.new(1, 0, 1, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = COLORS.Accent,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Parent = sideBar
    })

    local tabButtonsLayout = createInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 5),
        Parent = tabButtonsHolder
    })

    local tabButtonsPadding = createInstance("UIPadding", {
        PaddingTop = UDim.new(0, 10),
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
        Parent = tabButtonsHolder
    })

    local contentFrame = createInstance("Frame", {
        Name = "ContentFrame",
        Size = UDim2.new(1, -160, 1, -50),
        Position = UDim2.new(0, 155, 0, 45),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Parent = mainFrame
    })

    local tabsHolder = createInstance("Frame", {
        Name = "TabsHolder",
        Size = UDim2.new(1, 0, 0, 30),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Parent = contentFrame
    })

    local tabsLayout = createInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        FillDirection = Enum.FillDirection.Horizontal,
        Padding = UDim.new(0, 5),
        Parent = tabsHolder
    })

    local pagesHolder = createInstance("Frame", {
        Name = "PagesHolder",
        Size = UDim2.new(1, 0, 1, -35),
        Position = UDim2.new(0, 0, 0, 35),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Parent = contentFrame
    })

    -- Animation entrance
    mainFrame.Position = UDim2.new(0.5, -350, 1.5, 0)
    tween(mainFrame, {Position = UDim2.new(0.5, -350, 0.5, -200)}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)

    -- Notification system
    local notificationsFrame = createInstance("Frame", {
        Name = "NotificationsFrame",
        Size = UDim2.new(0, 300, 1, 0),
        Position = UDim2.new(1, -310, 0, 0),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Parent = screenGui
    })

    local notificationsLayout = createInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        VerticalAlignment = Enum.VerticalAlignment.Bottom,
        Padding = UDim.new(0, 10),
        Parent = notificationsFrame
    })

    local notificationsPadding = createInstance("UIPadding", {
        PaddingBottom = UDim.new(0, 10),
        Parent = notificationsFrame
    })

    -- Tab system
    local tabs = {}
    local selectedTab = nil
    local selectedCategory = nil
    local categories = {}

    local library = {
        ScreenGui = screenGui,
        MainFrame = mainFrame,
        Tabs = tabs,
        SelectedTab = nil,
        SelectedCategory = nil
    }

    function library:Tab(name)
        local tabButton = createInstance("TextButton", {
            Name = name .. "Button",
            Size = UDim2.new(1, 0, 0, 30),
            BackgroundColor3 = COLORS.TabUnselected,
            Text = "",
            Parent = tabButtonsHolder
        })

        local tabButtonCorner = createInstance("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = tabButton
        })

        local tabIcon = createInstance("ImageLabel", {
            Name = "Icon",
            Size = UDim2.new(0, 20, 0, 20),
            Position = UDim2.new(0, 5, 0.5, 0),
            AnchorPoint = Vector2.new(0, 0.5),
            BackgroundTransparency = 1,
            Image = "rbxassetid://7072706318", -- Default icon
            ImageColor3 = COLORS.SubText,
            Parent = tabButton
        })
        local tabLabel = createInstance("TextLabel", {
            Name = "Label",
            Size = UDim2.new(1, -35, 1, 0),
            Position = UDim2.new(0, 30, 0, 0),
            BackgroundTransparency = 1,
            TextColor3 = COLORS.SubText,
            TextSize = 14,
            Font = Enum.Font.GothamSemibold,
            Text = name,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = tabButton
        })

        local page = createInstance("ScrollingFrame", {
            Name = name .. "Page",
            Size = UDim2.new(1, 0, 1, 0),
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            ScrollBarThickness = 2,
            ScrollBarImageColor3 = COLORS.Accent,
            CanvasSize = UDim2.new(0, 0, 0, 0),
            Visible = false,
            Parent = pagesHolder
        })

        local pageLayout = createInstance("UIListLayout", {
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 10),
            Parent = page
        })

        local pagePadding = createInstance("UIPadding", {
            PaddingTop = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            Parent = page
        })

        pageLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            page.CanvasSize = UDim2.new(0, 0, 0, pageLayout.AbsoluteContentSize.Y + 20)
        end)

        local tab = {
            Button = tabButton,
            Page = page,
            Name = name,
            Sections = {}
        }

        tabButton.MouseButton1Click:Connect(function()
            rippleEffect(tabButton)
            library:SelectTab(tab)
        end)

        table.insert(tabs, tab)
        
        -- Auto-select first tab
        if #tabs == 1 then
            library:SelectTab(tab)
        end

        function tab:Section(title)
            local section = createInstance("Frame", {
                Name = title .. "Section",
                Size = UDim2.new(1, 0, 0, 40), -- Initial size, will be updated
                BackgroundColor3 = COLORS.SectionBackground,
                BorderSizePixel = 0,
                Parent = page
            })

            local sectionCorner = createInstance("UICorner", {
                CornerRadius = UDim.new(0, 6),
                Parent = section
            })

            local sectionTitle = createInstance("TextLabel", {
                Name = "Title",
                Size = UDim2.new(1, -20, 0, 30),
                Position = UDim2.new(0, 10, 0, 0),
                BackgroundTransparency = 1,
                TextColor3 = COLORS.Accent,
                TextSize = 16,
                Font = Enum.Font.GothamBold,
                Text = title,
                TextXAlignment = Enum.TextXAlignment.Left,
                Parent = section
            })

            local contentHolder = createInstance("Frame", {
                Name = "ContentHolder",
                Size = UDim2.new(1, -20, 1, -40),
                Position = UDim2.new(0, 10, 0, 35),
                BackgroundTransparency = 1,
                BorderSizePixel = 0,
                Parent = section
            })

            local contentLayout = createInstance("UIListLayout", {
                SortOrder = Enum.SortOrder.LayoutOrder,
                Padding = UDim.new(0, 8),
                Parent = contentHolder
            })

            contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
                section.Size = UDim2.new(1, 0, 0, contentLayout.AbsoluteContentSize.Y + 45)
            end)

            local sectionObj = {
                Frame = section,
                ContentHolder = contentHolder
            }

            table.insert(tab.Sections, sectionObj)

            -- Element creation functions
            function sectionObj:Button(options)
                options = options or {}
                local buttonText = options.Text or "Button"
                local callback = options.Callback or function() end

                local button = createInstance("TextButton", {
                    Name = "Button",
                    Size = UDim2.new(1, 0, 0, 32),
                    BackgroundColor3 = COLORS.ElementBackground,
                    Text = "",
                    Parent = contentHolder
                })

                local buttonCorner = createInstance("UICorner", {
                    CornerRadius = UDim.new(0, 6),
                    Parent = button
                })

                local buttonLabel = createInstance("TextLabel", {
                    Name = "Label",
                    Size = UDim2.new(1, 0, 1, 0),
                    BackgroundTransparency = 1,
                    TextColor3 = COLORS.Text,
                    TextSize = 14,
                    Font = Enum.Font.GothamSemibold,
                    Text = buttonText,
                    Parent = button
                })

                button.MouseButton1Click:Connect(function()
                    rippleEffect(button)
                    callback()
                end)

                button.MouseEnter:Connect(function()
                    tween(button, {BackgroundColor3 = COLORS.ElementBackgroundHover}, 0.2)
                end)

                button.MouseLeave:Connect(function()
                    tween(button, {BackgroundColor3 = COLORS.ElementBackground}, 0.2)
                end)

                return button
            end

            return sectionObj
        end

        return tab
    end

    function library:SelectTab(tab)
        if selectedTab == tab then return end
        
        -- Deselect current tab
        if selectedTab then
            tween(selectedTab.Button, {BackgroundColor3 = COLORS.TabUnselected}, 0.2)
            local icon = selectedTab.Button:FindFirstChild("Icon")
            local label = selectedTab.Button:FindFirstChild("Label")
            if icon then tween(icon, {ImageColor3 = COLORS.SubText}, 0.2) end
            if label then tween(label, {TextColor3 = COLORS.SubText}, 0.2) end
            selectedTab.Page.Visible = false
        end
        
        -- Select new tab
        selectedTab = tab
        tween(tab.Button, {BackgroundColor3 = COLORS.TabSelected}, 0.2)
        local icon = tab.Button:FindFirstChild("Icon")
        local label = tab.Button:FindFirstChild("Label")
        if icon then tween(icon, {ImageColor3 = COLORS.Accent}, 0.2) end
        if label then tween(label, {TextColor3 = COLORS.Accent}, 0.2) end
        tab.Page.Visible = true
        
        library.SelectedTab = tab
    end

    function library:Notification(options)
        options = options or {}
        local title = options.Title or "Notification"
        local text = options.Text or "This is a notification"
        local duration = options.Duration or 5
        local type = options.Type or "Info" -- Info, Success, Warning, Error

        local colors = {
            Info = Color3.fromRGB(70, 130, 255),
            Success = Color3.fromRGB(70, 200, 120),
            Warning = Color3.fromRGB(255, 200, 70),
            Error = Color3.fromRGB(255, 70, 70)
        }

        local notification = createInstance("Frame", {
            Name = "Notification",
            Size = UDim2.new(1, 0, 0, 80),
            BackgroundColor3 = COLORS.BackgroundDarker,
            BorderSizePixel = 0,
            Position = UDim2.new(1, 0, 0, 0),
            Parent = notificationsFrame
        })

        local notificationCorner = createInstance("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = notification
        })

        local notificationBar = createInstance("Frame", {
            Name = "Bar",
            Size = UDim2.new(0, 4, 1, 0),
            BackgroundColor3 = colors[type],
            BorderSizePixel = 0,
            Parent = notification
        })

        local notificationBarCorner = createInstance("UICorner", {
            CornerRadius = UDim.new(0, 8),
            Parent = notificationBar
        })

        local notificationTitle = createInstance("TextLabel", {
            Name = "Title",
            Size = UDim2.new(1, -20, 0, 25),
            Position = UDim2.new(0, 15, 0, 5),
            BackgroundTransparency = 1,
            TextColor3 = colors[type],
            TextSize = 16,
            Font = Enum.Font.GothamBold,
            Text = title,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = notification
        })

        local notificationText = createInstance("TextLabel", {
            Name = "Text",
            Size = UDim2.new(1, -20, 0, 40),
            Position = UDim2.new(0, 15, 0, 30),
            BackgroundTransparency = 1,
            TextColor3 = COLORS.Text,
            TextSize = 14,
            Font = Enum.Font.Gotham,
            Text = text,
            TextWrapped = true,
            TextXAlignment = Enum.TextXAlignment.Left,
            Parent = notification
        })

        -- Animation
        tween(notification, {Position = UDim2.new(0, 0, 0, 0)}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
        
        -- Auto-remove after duration
        delay(duration, function()
            tween(notification, {Position = UDim2.new(1, 0, 0, 0)}, 0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In)
            wait(0.5)
            notification:Destroy()
        end)
    end

    return library
end

return NebulaUI
