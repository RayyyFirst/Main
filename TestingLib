local ModernUI = {}

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

-- Utility functions
local function createInstance(className, properties)
    local instance = Instance.new(className)
    for k, v in pairs(properties) do
        instance[k] = v
    end
    return instance
end

local function tween(instance, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(duration or 0.3, easingStyle or Enum.EasingStyle.Quad, easingDirection or Enum.EasingDirection.Out)
    local tween = TweenService:Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Color palette
local COLORS = {
    Background = Color3.fromRGB(30, 30, 35),
    Accent = Color3.fromRGB(65, 105, 225),
    Text = Color3.fromRGB(255, 255, 255),
    SubText = Color3.fromRGB(200, 200, 200),
    Button = Color3.fromRGB(45, 45, 50),
    ButtonHover = Color3.fromRGB(55, 55, 60),
    Toggle = Color3.fromRGB(65, 105, 225),
    ToggleOff = Color3.fromRGB(100, 100, 100),
    Slider = Color3.fromRGB(65, 105, 225),
    SliderBackground = Color3.fromRGB(45, 45, 50),
}

-- Main UI creation function
function ModernUI.createUI(title)
    local screenGui = createInstance("ScreenGui", {
        Name = "ModernUI",
        Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    })

    local mainFrame = createInstance("Frame", {
        Name = "MainFrame",
        Size = UDim2.new(0, 400, 0, 300),
        Position = UDim2.new(0.5, -200, 0.5, -150),
        BackgroundColor3 = COLORS.Background,
        BorderSizePixel = 0,
        Parent = screenGui
    })

    local cornerRadius = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = mainFrame
    })

    local titleBar = createInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = COLORS.Accent,
        BorderSizePixel = 0,
        Parent = mainFrame
    })

    local titleBarCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 10),
        Parent = titleBar
    })

    local titleLabel = createInstance("TextLabel", {
        Name = "TitleLabel",
        Size = UDim2.new(1, -40, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = COLORS.Text,
        TextSize = 18,
        Font = Enum.Font.GothamBold,
        Text = title or "Modern UI",
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = titleBar
    })

    local closeButton = createInstance("TextButton", {
        Name = "CloseButton",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -35, 0, 5),
        BackgroundColor3 = Color3.fromRGB(255, 80, 80),
        Text = "X",
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamBold,
        Parent = titleBar
    })

    local closeButtonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 15),
        Parent = closeButton
    })

    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)

    -- Make the UI draggable
    local dragging, dragInput, dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    titleBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    local contentFrame = createInstance("ScrollingFrame", {
        Name = "ContentFrame",
        Size = UDim2.new(1, -20, 1, -50),
        Position = UDim2.new(0, 10, 0, 45),
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        ScrollBarThickness = 4,
        ScrollBarImageColor3 = COLORS.Accent,
        Parent = mainFrame
    })

    local uiListLayout = createInstance("UIListLayout", {
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 10),
        Parent = contentFrame
    })

    local function updateContentFrameSize()
        contentFrame.CanvasSize = UDim2.new(0, 0, 0, uiListLayout.AbsoluteContentSize.Y)
    end

    uiListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(updateContentFrameSize)

    return {
        ScreenGui = screenGui,
        MainFrame = mainFrame,
        TitleBar = titleBar,
        ContentFrame = contentFrame,
        UpdateContentFrameSize = updateContentFrameSize
    }
end

-- Create a button
function ModernUI.createButton(parent, text, callback)
    local button = createInstance("TextButton", {
        Name = "Button",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundColor3 = COLORS.Button,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Text = text,
        Parent = parent
    })

    local buttonCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 8),
        Parent = button
    })

    button.MouseEnter:Connect(function()
        tween(button, {BackgroundColor3 = COLORS.ButtonHover}, 0.2)
    end)

    button.MouseLeave:Connect(function()
        tween(button, {BackgroundColor3 = COLORS.Button}, 0.2)
    end)

    button.MouseButton1Click:Connect(function()
        if callback then callback() end
    end)

    return button
end

-- Create a toggle
function ModernUI.createToggle(parent, text, default, callback)
    local toggle = createInstance("Frame", {
        Name = "Toggle",
        Size = UDim2.new(1, 0, 0, 40),
        BackgroundTransparency = 1,
        Parent = parent
    })

    local label = createInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(1, -60, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Text = text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = toggle
    })

    local switch = createInstance("Frame", {
        Name = "Switch",
        Size = UDim2.new(0, 50, 0, 24),
        Position = UDim2.new(1, -50, 0.5, -12),
        BackgroundColor3 = default and COLORS.Toggle or COLORS.ToggleOff,
        Parent = toggle
    })

    local switchCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = switch
    })

    local handle = createInstance("Frame", {
        Name = "Handle",
        Size = UDim2.new(0, 20, 0, 20),
        Position = UDim2.new(default and 1 or 0, default and -22 or 2, 0.5, -10),
        BackgroundColor3 = COLORS.Text,
        Parent = switch
    })

    local handleCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = handle
    })

    local toggled = default or false

    local function updateToggle()
        tween(handle, {Position = toggled and UDim2.new(1, -22, 0.5, -10) or UDim2.new(0, 2, 0.5, -10)}, 0.2)
        tween(switch, {BackgroundColor3 = toggled and COLORS.Toggle or COLORS.ToggleOff}, 0.2)
        if callback then callback(toggled) end
    end

    switch.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            toggled = not toggled
            updateToggle()
        end
    end)

    return toggle
end

-- Create a slider
function ModernUI.createSlider(parent, text, min, max, default, callback)
    local slider = createInstance("Frame", {
        Name = "Slider",
        Size = UDim2.new(1, 0, 0, 60),
        BackgroundTransparency = 1,
        Parent = parent
    })

    local label = createInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Text = text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = slider
    })

    local valueLabel = createInstance("TextLabel", {
        Name = "Value",
        Size = UDim2.new(0, 50, 0, 20),
        Position = UDim2.new(1, -50, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = COLORS.SubText,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Text = tostring(default),
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = slider
    })

    local sliderBar = createInstance("Frame", {
        Name = "SliderBar",
        Size = UDim2.new(1, 0, 0, 4),
        Position = UDim2.new(0, 0, 0, 30),
        BackgroundColor3 = COLORS.SliderBackground,
        BorderSizePixel = 0,
        Parent = slider
    })

    local sliderBarCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = sliderBar
    })

    local sliderFill = createInstance("Frame", {
        Name = "SliderFill",
        Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
        BackgroundColor3 = COLORS.Slider,
        BorderSizePixel = 0,
        Parent = sliderBar
    })

    local sliderFillCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = sliderFill
    })

    local handle = createInstance("Frame", {
        Name = "Handle",
        Size = UDim2.new(0, 16, 0, 16),
        Position = UDim2.new((default - min) / (max - min), -8, 0.5, -8),
        BackgroundColor3 = COLORS.Text,
        Parent = sliderBar
    })

    local handleCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(1, 0),
        Parent = handle
    })

    local function updateSlider(value)
        value = math.clamp(value, min, max)
        local percent = (value - min) / (max - min)
        
        tween(sliderFill, {Size = UDim2.new(percent, 0, 1, 0)}, 0.1)
        tween(handle, {Position = UDim2.new(percent, -8, 0.5, -8)}, 0.1)
        
        valueLabel.Text = tostring(math.round(value))
        if callback then callback(value) end
    end

    local dragging = false

    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
        end
    end)

    handle.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = UserInputService:GetMouseLocation()
            local relativePos = mousePos - sliderBar.AbsolutePosition
            local percent = math.clamp(relativePos.X / sliderBar.AbsoluteSize.X, 0, 1)
            local value = min + (max - min) * percent
            updateSlider(value)
        end
    end)

    updateSlider(default)

    return slider
end

-- Create a dropdown
function ModernUI.createDropdown(parent, text, options, default, callback)
    local dropdown = createInstance("Frame", {
        Name = "Dropdown",
        Size = UDim2.new(1, 0, 0, 60),
        BackgroundTransparency = 1,
        Parent = parent
    })

    local label = createInstance("TextLabel", {
        Name = "Label",
        Size = UDim2.new(1, 0, 0, 20),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Text = text,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = dropdown
    })

    local selectedOption = createInstance("TextButton", {
        Name = "SelectedOption",
        Size = UDim2.new(1, 0, 0, 30),
        Position = UDim2.new(0, 0, 0, 25),
        BackgroundColor3 = COLORS.Button,
        TextColor3 = COLORS.Text,
        TextSize = 14,
        Font = Enum.Font.GothamSemibold,
        Text = default or "Select an option",
        Parent = dropdown
    })

    local selectedOptionCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = selectedOption
    })

    local optionsFrame = createInstance("Frame", {
        Name = "OptionsFrame",
        Size = UDim2.new(1, 0, 0, #options * 30),
        Position = UDim2.new(0, 0, 1, 5),
        BackgroundColor3 = COLORS.Background,
        Visible = false,
        Parent = dropdown
    })

    local optionsFrameCorner = createInstance("UICorner", {
        CornerRadius = UDim.new(0, 6),
        Parent = optionsFrame
    })

    for i, option in ipairs(options) do
        local optionButton = createInstance("TextButton", {
            Name = "Option" .. i,
            Size = UDim2.new(1, 0, 0, 30),
            Position = UDim2.new(0, 0, 0, (i - 1) * 30),
            BackgroundColor3 = COLORS.Button,
            TextColor3 = COLORS.Text,
            TextSize = 14,
            Font = Enum.Font.GothamSemibold,
            Text = option,
            Parent = optionsFrame
        })

        local optionButtonCorner = createInstance("UICorner", {
            CornerRadius = UDim.new(0, 6),
            Parent = optionButton
        })

        optionButton.MouseButton1Click:Connect(function()
            selectedOption.Text = option
            optionsFrame.Visible = false
            if callback then callback(option) end
        end)
    end

    selectedOption.MouseButton1Click:Connect(function()
        optionsFrame.Visible = not optionsFrame.Visible
    end)

    return dropdown
end

return ModernUI
