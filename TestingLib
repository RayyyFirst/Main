local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local LocalPlayer = game:GetService("Players").LocalPlayer
local Mouse = LocalPlayer:GetMouse()

local ModernUI = {}

function ModernUI.new(title, toggleKey)
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "ModernUI"
    ScreenGui.Parent = game.CoreGui
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    local Main = Instance.new("Frame")
    Main.Name = "Main"
    Main.Parent = ScreenGui
    Main.AnchorPoint = Vector2.new(0.5, 0.5)
    Main.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    Main.Position = UDim2.new(0.5, 0, 0.5, 0)
    Main.Size = UDim2.new(0, 400, 0, 300)
    Main.ClipsDescendants = true

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 10)
    UICorner.Parent = Main

    local TopBar = Instance.new("Frame")
    TopBar.Name = "TopBar"
    TopBar.Parent = Main
    TopBar.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    TopBar.Size = UDim2.new(1, 0, 0, 30)

    local UICorner_2 = Instance.new("UICorner")
    UICorner_2.CornerRadius = UDim.new(0, 10)
    UICorner_2.Parent = TopBar

    local Title = Instance.new("TextLabel")
    Title.Name = "Title"
    Title.Parent = TopBar
    Title.BackgroundTransparency = 1
    Title.Position = UDim2.new(0, 10, 0, 0)
    Title.Size = UDim2.new(1, -80, 1, 0)
    Title.Font = Enum.Font.GothamSemibold
    Title.Text = title
    Title.TextColor3 = Color3.fromRGB(255, 255, 255)
    Title.TextSize = 14
    Title.TextXAlignment = Enum.TextXAlignment.Left

    local MinimizeButton = Instance.new("TextButton")
    MinimizeButton.Name = "MinimizeButton"
    MinimizeButton.Parent = TopBar
    MinimizeButton.BackgroundTransparency = 1
    MinimizeButton.Position = UDim2.new(1, -60, 0, 0)
    MinimizeButton.Size = UDim2.new(0, 30, 1, 0)
    MinimizeButton.Font = Enum.Font.GothamSemibold
    MinimizeButton.Text = "-"
    MinimizeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    MinimizeButton.TextSize = 20

    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "CloseButton"
    CloseButton.Parent = TopBar
    CloseButton.BackgroundTransparency = 1
    CloseButton.Position = UDim2.new(1, -30, 0, 0)
    CloseButton.Size = UDim2.new(0, 30, 1, 0)
    CloseButton.Font = Enum.Font.GothamSemibold
    CloseButton.Text = "X"
    CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseButton.TextSize = 14

    local Content = Instance.new("ScrollingFrame")
    Content.Name = "Content"
    Content.Parent = Main
    Content.BackgroundTransparency = 1
    Content.Position = UDim2.new(0, 10, 0, 40)
    Content.Size = UDim2.new(1, -20, 1, -50)
    Content.CanvasSize = UDim2.new(0, 0, 0, 0)
    Content.ScrollBarThickness = 5

    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Parent = Content
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
    UIListLayout.Padding = UDim.new(0, 10)

    local dragging, dragInput, dragStart, startPos

    local function update(input)
        local delta = input.Position - dragStart
        Main.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end

    TopBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position

            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)

    TopBar.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)

    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            update(input)
        end
    end)

    local minimized = false
    local originalSize = Main.Size

    MinimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        if minimized then
            TweenService:Create(Main, TweenInfo.new(0.3), {Size = UDim2.new(0, 400, 0, 30)}):Play()
            Content.Visible = false
        else
            TweenService:Create(Main, TweenInfo.new(0.3), {Size = originalSize}):Play()
            Content.Visible = true
        end
    end)

    CloseButton.MouseButton1Click:Connect(function()
        ScreenGui:Destroy()
    end)

    local window = {}

    function window:AddButton(text, callback)
        local Button = Instance.new("TextButton")
        Button.Name = "Button"
        Button.Parent = Content
        Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        Button.Size = UDim2.new(1, 0, 0, 30)
        Button.Font = Enum.Font.Gotham
        Button.Text = text
        Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        Button.TextSize = 14

        local UICorner_3 = Instance.new("UICorner")
        UICorner_3.CornerRadius = UDim.new(0, 5)
        UICorner_3.Parent = Button

        Button.MouseButton1Click:Connect(function()
            callback()
        end)

        Button.MouseEnter:Connect(function()
            TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}):Play()
        end)

        Button.MouseLeave:Connect(function()
            TweenService:Create(Button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
        end)

        return Button
    end

    function window:AddToggle(text, default, callback)
        local ToggleFrame = Instance.new("Frame")
        ToggleFrame.Name = "ToggleFrame"
        ToggleFrame.Parent = Content
        ToggleFrame.BackgroundTransparency = 1
        ToggleFrame.Size = UDim2.new(1, 0, 0, 30)

        local ToggleButton = Instance.new("TextButton")
        ToggleButton.Name = "ToggleButton"
        ToggleButton.Parent = ToggleFrame
        ToggleButton.AnchorPoint = Vector2.new(0, 0.5)
        ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        ToggleButton.Position = UDim2.new(0, 0, 0.5, 0)
        ToggleButton.Size = UDim2.new(0, 30, 0, 30)
        ToggleButton.Font = Enum.Font.SourceSans
        ToggleButton.Text = ""
        ToggleButton.TextColor3 = Color3.fromRGB(0, 0, 0)
        ToggleButton.TextSize = 14

        local UICorner_4 = Instance.new("UICorner")
        UICorner_4.CornerRadius = UDim.new(0, 5)
        UICorner_4.Parent = ToggleButton

        local ToggleText = Instance.new("TextLabel")
        ToggleText.Name = "ToggleText"
        ToggleText.Parent = ToggleFrame
        ToggleText.BackgroundTransparency = 1
        ToggleText.Position = UDim2.new(0, 40, 0, 0)
        ToggleText.Size = UDim2.new(1, -40, 1, 0)
        ToggleText.Font = Enum.Font.Gotham
        ToggleText.Text = text
        ToggleText.TextColor3 = Color3.fromRGB(255, 255, 255)
        ToggleText.TextSize = 14
        ToggleText.TextXAlignment = Enum.TextXAlignment.Left

        local toggled = default or false

        local function updateToggle()
            if toggled then
                TweenService:Create(ToggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(0, 170, 255)}):Play()
            else
                TweenService:Create(ToggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}):Play()
            end
            callback(toggled)
        end

        ToggleButton.MouseButton1Click:Connect(function()
            toggled = not toggled
            updateToggle()
        end)

        updateToggle()

        return ToggleFrame
    end

    function window:AddSlider(text, min, max, default, callback)
        local SliderFrame = Instance.new("Frame")
        SliderFrame.Name = "SliderFrame"
        SliderFrame.Parent = Content
        SliderFrame.BackgroundTransparency = 1
        SliderFrame.Size = UDim2.new(1, 0, 0, 50)

        local SliderText = Instance.new("TextLabel")
        SliderText.Name = "SliderText"
        SliderText.Parent = SliderFrame
        SliderText.BackgroundTransparency = 1
        SliderText.Size = UDim2.new(1, 0, 0, 20)
        SliderText.Font = Enum.Font.Gotham
        SliderText.Text = text
        SliderText.TextColor3 = Color3.fromRGB(255, 255, 255)
        SliderText.TextSize = 14
        SliderText.TextXAlignment = Enum.TextXAlignment.Left

        local SliderBar = Instance.new("Frame")
        SliderBar.Name = "SliderBar"
        SliderBar.Parent = SliderFrame
        SliderBar.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        SliderBar.Position = UDim2.new(0, 0, 0, 25)
        SliderBar.Size = UDim2.new(1, 0, 0, 5)

        local UICorner_5 = Instance.new("UICorner")
        UICorner_5.CornerRadius = UDim.new(0, 2)
        UICorner_5.Parent = SliderBar

        local SliderFill = Instance.new("Frame")
        SliderFill.Name = "SliderFill"
        SliderFill.Parent = SliderBar
        SliderFill.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
        SliderFill.Size = UDim2.new(0, 0, 1, 0)

        local UICorner_6 = Instance.new("UICorner")
        UICorner_6.CornerRadius = UDim.new(0, 2)
        UICorner_6.Parent = SliderFill

        local SliderButton = Instance.new("TextButton")
        SliderButton.Name = "SliderButton"
        SliderButton.Parent = SliderBar
        SliderButton.AnchorPoint = Vector2.new(0.5, 0.5)
        SliderButton.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
        SliderButton.Position = UDim2.new(0, 0, 0.5, 0)
        SliderButton.Size = UDim2.new(0, 10, 0, 10)
        SliderButton.Font = Enum.Font.SourceSans
        SliderButton.Text = ""
        SliderButton.TextColor3 = Color3.fromRGB(0, 0, 0)
        SliderButton.TextSize = 14

        local UICorner_7 = Instance.new("UICorner")
        UICorner_7.CornerRadius = UDim.new(1, 0)
        UICorner_7.Parent = SliderButton

        local SliderValue = Instance.new("TextLabel")
        SliderValue.Name = "SliderValue"
        SliderValue.Parent = SliderFrame
        SliderValue.BackgroundTransparency = 1
        SliderValue.Position = UDim2.new(0, 0, 0, 35)
        SliderValue.Size = UDim2.new(1, 0, 0, 20)
        SliderValue.Font = Enum.Font.Gotham
        SliderValue.Text = tostring(default)
        SliderValue.TextColor3 = Color3.fromRGB(255, 255, 255)
        SliderValue.TextSize = 14
        SliderValue.TextXAlignment = Enum.TextXAlignment.Left

        local function updateSlider(value)
            local percent = (value - min) / (max - min)
            SliderFill.Size = UDim2.new(percent, 0, 1, 0)
            SliderButton.Position = UDim2.new(percent, 0, 0.5, 0)
            SliderValue.Text = tostring(math.floor(value))
            callback(value)
        end

        local dragging = false

        SliderButton.MouseButton1Down:Connect(function()
            dragging = true
        end)

        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)

        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mousePos = UserInputService:GetMouseLocation()
                local relativePos = mousePos - SliderBar.AbsolutePosition
                local percent = math.clamp(relativePos.X / SliderBar.AbsoluteSize.X, 0, 1)
                local value = min + (max - min) * percent
                updateSlider(value)
            end
        end)

        updateSlider(default)

        return SliderFrame
    end

    function window:AddNotification(title, message, duration)
        local Notification = Instance.new("Frame")
        Notification.Name = "Notification"
        Notification.Parent = ScreenGui
        Notification.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        Notification.Position = UDim2.new(1, 10, 1, -10)
        Notification.Size = UDim2.new(0, 200, 0, 80)
        Notification.AnchorPoint = Vector2.new(1, 1)

        local UICorner_8 = Instance.new("UICorner")
        UICorner_8.CornerRadius = UDim.new(0, 5)
        UICorner_8.Parent = Notification

        local NotificationTitle = Instance.new("TextLabel")
        NotificationTitle.Name = "NotificationTitle"
        NotificationTitle.Parent = Notification
        NotificationTitle.BackgroundTransparency = 1
        NotificationTitle.Position = UDim2.new(0, 10, 0, 5)
        NotificationTitle.Size = UDim2.new(1, -20, 0, 20)
        NotificationTitle.Font = Enum.Font.GothamBold
        NotificationTitle.Text = title
        NotificationTitle.TextColor3 = Color3.fromRGB(255, 255, 255)
        NotificationTitle.TextSize = 14
        NotificationTitle.TextXAlignment = Enum.TextXAlignment.Left

        local NotificationMessage = Instance.new("TextLabel")
        NotificationMessage.Name = "NotificationMessage"
        NotificationMessage.Parent = Notification
        NotificationMessage.BackgroundTransparency = 1
        NotificationMessage.Position = UDim2.new(0, 10, 0, 30)
        NotificationMessage.Size = UDim2.new(1, -20, 1, -35)
        NotificationMessage.Font = Enum.Font.Gotham
        NotificationMessage.Text = message
        NotificationMessage.TextColor3 = Color3.fromRGB(200, 200, 200)
        NotificationMessage.TextSize = 12
        NotificationMessage.TextWrapped = true
        NotificationMessage.TextXAlignment = Enum.TextXAlignment.Left
        NotificationMessage.TextYAlignment = Enum.TextYAlignment.Top

        TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(1, -10, 1, -10)}):Play()

        task.delay(duration or 5, function()
            TweenService:Create(Notification, TweenInfo.new(0.5, Enum.EasingStyle.Quart, Enum.EasingDirection.Out), {Position = UDim2.new(1, 210, 1, -10)}):Play()
            task.wait(0.5)
            Notification:Destroy()
        end)
    end

    -- Toggle keybind
    UserInputService.InputBegan:Connect(function(input, gameProcessed)
        if not gameProcessed and input.KeyCode == toggleKey then
            Main.Visible = not Main.Visible
        end
    end)

    -- UI Scaling
    local function updateUIScale()
        local viewportSize = workspace.CurrentCamera.ViewportSize
        local scale = math.min(viewportSize.X / 1920, viewportSize.Y / 1080)
        ScreenGui.UIScale = scale
    end

    updateUIScale()
    workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(updateUIScale)

    return window
end

return ModernUI
