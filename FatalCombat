local WindUI = loadstring(game:HttpGet("https://tree-hub.vercel.app/api/UI/WindUI"))()

local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/linemaster2/esp-library/main/library.lua"))()

local Window = WindUI:CreateWindow({
    Title = "Ratware",
    Icon = "door-open",
    Author = "Rayyyfirst | attemptingtocode on dc",
    Folder = "RatwareFC",
    Size = UDim2.fromOffset(580, 460),
    Transparent = false,
    Theme = "Dark",
    SideBarWidth = 200,
    HasOutline = true,
})

Window:EditOpenButton({
    Title = "Open UI",
    Icon = "monitor",
    CornerRadius = UDim.new(0,10),
    StrokeThickness = 2,
    Color = ColorSequence.new(
        Color3.fromHex("FF0F7B"), 
        Color3.fromHex("F89B29")
    ),
    Draggable = true,
})

local Tabs = {
    MainTab = Window:Tab({ Title = "Main Features", Icon = "mouse-pointer-2", Desc = "main tab i think lol." }),
    PlayerTab = Window:Tab({ Title = "Player things", Icon = "mouse-pointer-2", Desc = "Player modification." }),
    ESPTab = Window:Tab({ Title = "ESP Settings", Icon = "eye", Desc = "ESP customization." }),
    QoLTab = Window:Tab({ Title = "QoL Features", Icon = "settings", Desc = "Quality of Life improvements." }),
    CreditsTab = Window:Tab({ Title = "Credits", Icon = "mouse-pointer", Desc = "Credits for the script!" }),
}

Window:SelectTab(1)
local canWallComboEnabled = false

local function enableCanWallCombo()
    while canWallComboEnabled do
        local player = game.Players.LocalPlayer
        local char = player.Character
        if char then
            char:SetAttribute("CanWallCombo", true)
        end
        wait(0.1) 
    end
end

local function enableCanRushdown()
    while canRushdownEnabled do
        local player = game.Players.LocalPlayer
        local char = player.Character
        if char then
            char:SetAttribute("CanRushdown", true)
        end
        wait(0.1)
    end
end

local PerfectBlock = false

local function PerfectBlock()
    while PerfectBlock do
        local player = game.Players.LocalPlayer
        local char = player.Character
        if char then
            char:SetAttribute("PerfectBlock", true)
        end
        wait(0.1) 
    end
end

local walkspeedEnabled = false
local walkSpeedValue = 16 
local userInputService = game:GetService("UserInputService")

local function enableCFrameWalkSpeed()
    while walkspeedEnabled do
        game:GetService("RunService").RenderStepped:Wait()
        local player = game.Players.LocalPlayer
        local char = player.Character
        if char then
            local hrp = char:FindFirstChild("HumanoidRootPart")
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if hrp and humanoid and humanoid.MoveDirection.Magnitude > 0 then
                hrp.CFrame = hrp.CFrame + humanoid.MoveDirection * (walkSpeedValue * 0.1)
            end
        end
    end
end

Tabs.PlayerTab:Toggle({
    Title = "Enable CFrame WalkSpeed",
    Default = false,
    Callback = function(state)
        walkspeedEnabled = state
        if walkspeedEnabled then
            spawn(enableCFrameWalkSpeed)
        end
    end
})

local userInputService = game:GetService("UserInputService")
local infiniteJumpEnabled = false

userInputService.JumpRequest:Connect(function()
    if infiniteJumpEnabled then
        local player = game.Players.LocalPlayer
        local char = player.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    end
end)

Tabs.PlayerTab:Toggle({
    Title = "Enable Infinite Jump",
    Default = false,
    Callback = function(state)
        infiniteJumpEnabled = state
    end
})

local nostun_highunc = false
local function enableNoStunHighUNC()
    print("High UNC NoStun is enabled!")

    local success, mt = pcall(function() return getrawmetatable(game) end)
    if not success then
        print("Failed to access metatable, High UNC NoStun PROBABLY will not work.")
        return
    end

    setreadonly(mt, false)
    local oldIndex = mt.__newindex

    mt.__newindex = function(self, key, value)
        if nostun_highunc and (key == "Stunned" or key == "LightStunned" or key == "StunSubject" or key == "DashLock" or key == "Busy" or key == "BusySubject" or key == "StunWalkSpeed") then
            return
        end
        return oldIndex(self, key, value)
    end

    while nostun_highunc do
        wait(0.2)
        local player = game.Players.LocalPlayer
        local char = player.Character
        if char then
            char:SetAttribute("Stunned", false)
            char:SetAttribute("LightStunned", false)
            char:SetAttribute("StunSubject", "")
            char:SetAttribute("DashLock", false)
            char:SetAttribute("Busy", false)
            char:SetAttribute("BusySubject", "")
            char:SetAttribute("StunWalkSpeed", 24)
            char:SetAttribute("CanEvasive", true)
            char:SetAttribute("StunJumpPower", 50)
        end
    end
end

Tabs.MainTab:Toggle({ Title = "No-Stun (High UNC)", Default = false, Callback = function(state)
    nostun_highunc = state
    if nostun_highunc then
        spawn(enableNoStunHighUNC)
    end
end })

local nostun_lowunc = false
local function enableNoStunLowUNC()
    print("Low UNC NoStun is enabled!")

    while nostun_lowunc do
        wait(0.1)
        local player = game.Players.LocalPlayer
        local char = player.Character
        if char then
            char:SetAttribute("Stunned", false)
            char:SetAttribute("LightStunned", false)
            char:SetAttribute("DashLock", false)
            char:SetAttribute("Busy", false)
            char:SetAttribute("BusySubject", "")
            char:SetAttribute("StunWalkSpeed", 24)
            char:SetAttribute("CanEvasive", true)
            char:SetAttribute("StunJumpPower", 50)
        end
    end
end

Tabs.MainTab:Toggle({ Title = "No-Stun (Low UNC)", Default = false, Callback = function(state)
    nostun_lowunc = state
    if nostun_lowunc then
        spawn(enableNoStunLowUNC)
    end
end })

Tabs.MainTab:Toggle({ Title = "Disable Both No-Stun Modes", Default = false, Callback = function(state)
    if state then
        nostun_highunc = false
        nostun_lowunc = false
    end
end })

Tabs.MainTab:Toggle({
    Title = "Can always wallcombo",
    Default = false,
    Callback = function(state)
        canWallComboEnabled = state
        if canWallComboEnabled then
            spawn(enableCanWallCombo)
        end
    end
})

Tabs.MainTab:Toggle({ Title = "No dash cooldown", Default = false, Callback = function(state) 
    game:GetService("ReplicatedStorage").Configuration.NoDashCooldown.Value = state 
end })

Tabs.MainTab:Toggle({ Title = "Give all gamepasses", Default = false, Callback = function(state)
    local passes = {"VIP", "Killsounds", "PrivateServers+", "EarlyAccess", "ExtraEmoteSlots"}
    for _, pass in ipairs(passes) do
        game:GetService("Players").LocalPlayer.OwnedGamepasses[pass].Value = state
    end
end })

Tabs.MainTab:Toggle({ Title = "Never In Combat", Default = false, Callback = function(state)
    while state do
        game:GetService("Players").LocalPlayer.InCombat.Value = false
        wait(0.1)
        if not state then break end
    end
end })

Tabs.MainTab:Toggle({ Title = "Hide Kills/Killstreak", Default = false, Callback = function(state)
    game:GetService("Players").LocalPlayer.GameplaySettings.HideKillstreak.Value = state
    game:GetService("Players").LocalPlayer.GameplaySettings.HideKills.Value = state
end })

local flingEnabled = false
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

if not ReplicatedStorage:FindFirstChild("juisdfj0i32i0eidsuf0iok") then
    local detection = Instance.new("Decal")
    detection.Name = "juisdfj0i32i0eidsuf0iok"
    detection.Parent = ReplicatedStorage
end

local function fling()
    local lp = Players.LocalPlayer
    local char, hrp, vel, movel = nil, nil, nil, 0.1

    while flingEnabled do
        RunService.Heartbeat:Wait()
        char = lp.Character
        hrp = char and char:FindFirstChild("HumanoidRootPart")

        if hrp then
            vel = hrp.Velocity
            hrp.Velocity = vel * 10000 + Vector3.new(0, 10000, 0)
            RunService.RenderStepped:Wait()
            hrp.Velocity = vel
            RunService.Stepped:Wait()
            hrp.Velocity = vel + Vector3.new(0, movel, 0)
            movel = -movel
        end
    end
end

Tabs.MainTab:Toggle({
    Title = "Enable Touch Fling",
    Default = false,
    Callback = function(state)
        flingEnabled = state

        if flingEnabled then
            coroutine.wrap(fling)()
        else
            flingEnabled = false
        end
    end
})

ESP.Enabled = true
ESP.ShowBox = true
ESP.BoxType = "Corner Box Esp"
ESP.ShowName = true
ESP.ShowHealth = true
ESP.ShowTracer = true
ESP.ShowDistance = true

Tabs.ESPTab:Toggle({ Title = "Enable ESP", Default = ESP.Enabled, Callback = function(state)
    ESP.Enabled = state
end })
Tabs.ESPTab:Toggle({ Title = "Show Boxes", Default = ESP.ShowBox, Callback = function(state)
    ESP.ShowBox = state
end })
Tabs.ESPTab:Dropdown({
    Title = "Box Type",
    Items = {"Corner Box Esp", "2D", "3D"},
    Default = ESP.BoxType,
    Callback = function(option)
        ESP.BoxType = option
    end
})
Tabs.ESPTab:Toggle({ Title = "Show Names", Default = ESP.ShowName, Callback = function(state)
    ESP.ShowName = state
end })
Tabs.ESPTab:Toggle({ Title = "Show Health", Default = ESP.ShowHealth, Callback = function(state)
    ESP.ShowHealth = state
end })
Tabs.ESPTab:Toggle({ Title = "Show Tracers", Default = ESP.ShowTracer, Callback = function(state)
    ESP.ShowTracer = state
end })
Tabs.ESPTab:Toggle({ Title = "Show Distance", Default = ESP.ShowDistance, Callback = function(state)
    ESP.ShowDistance = state
end })

Tabs.QoLTab:Button({
    Title = "Reset Character",
    Callback = function()
        local player = game.Players.LocalPlayer
        if player.Character then
            local hrp = player.Character:FindFirstChild("HumanoidRootPart")
            if hrp then
                hrp.Health = 0
            end
        end
    end
})

local antiAfkEnabled = false

local function antiAfk()
    local vu = game:GetService("VirtualUser")
    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        if antiAfkEnabled then
            vu:Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
            wait(1)
            vu:Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        end
    end)
end

Tabs.QoLTab:Toggle({
    Title = "Enable Anti-AFK",
    Default = false,
    Callback = function(state)
        antiAfkEnabled = state
        if antiAfkEnabled then
            spawn(antiAfk)
        end
    end
})

local shadersEnabled = false

local function enableShaders()
    local lighting = game:GetService("Lighting")
    if shadersEnabled then
        lighting.Brightness = 2
        lighting.GlobalShadows = true
        lighting.Ambient = Color3.fromRGB(255, 255, 255)
    else
        lighting.Brightness = 1
        lighting.GlobalShadows = false
        lighting.Ambient = Color3.fromRGB(127, 127, 127)
    end
end

Tabs.QoLTab:Toggle({
    Title = "Enable Shaders",
    Default = false,
    Callback = function(state)
        shadersEnabled = state
        enableShaders()
    end
})

Tabs.QoLTab:Input({
    Title = "Set WalkSpeed",
    Desc = "Enter your WalkSpeed value",
    PlaceholderText = "16",
    ClearTextOnFocus = false,
    Callback = function(value)
        local player = game.Players.LocalPlayer
        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = tonumber(value) or 16
            end
        end
    end
})

Tabs.QoLTab:Input({
    Title = "Set JumpPower",
    Desc = "Enter your JumpPower value",
    PlaceholderText = "50",
    ClearTextOnFocus = false,
    Callback = function(value)
        local player = game.Players.LocalPlayer
        if player.Character then
            local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = tonumber(value) or 50
            end
        end
    end
})

Tabs.QoLTab:Input({
    Title = "Set Field of View",
    Desc = "Enter your FOV value",
    PlaceholderText = "80",
    ClearTextOnFocus = false,
    Callback = function(value)
        game:GetService("Workspace").CurrentCamera.FieldOfView = tonumber(value) or 80
    end
})

Tabs.QoLTab:Input({
    Title = "Set FPS Limit",
    Desc = "Adjust FPS cap",
    PlaceholderText = "Enter FPS limit...",
    ClearTextOnFocus = false,
    Callback = function(value)
        setfpscap(tonumber(value) or 60)
    end
})

local shadersEnabled = false

local function enableShaders()
    local lighting = game:GetService("Lighting")

    if shadersEnabled then
        lighting.Brightness = 1.5
        lighting.GlobalShadows = true
        lighting.Ambient = Color3.fromRGB(180, 180, 180)
        lighting.OutdoorAmbient = Color3.fromRGB(120, 120, 120)
        lighting.ColorShift_Top = Color3.fromRGB(200, 170, 150)
        lighting.ColorShift_Bottom = Color3.fromRGB(50, 50, 50)
        lighting.EnvironmentSpecularScale = 1.2
        lighting.EnvironmentDiffuseScale = 0.8
        lighting.FogEnd = 500
        lighting.FogStart = 50
        lighting.FogColor = Color3.fromRGB(200, 200, 255)
        lighting.ClockTime = 16
    else
        lighting.Brightness = 1
        lighting.GlobalShadows = false
        lighting.Ambient = Color3.fromRGB(127, 127, 127)
        lighting.OutdoorAmbient = Color3.fromRGB(100, 100, 100)
        lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)
        lighting.ColorShift_Bottom = Color3.fromRGB(0, 0, 0)
        lighting.EnvironmentSpecularScale = 1
        lighting.EnvironmentDiffuseScale = 1
        lighting.FogEnd = 0
        lighting.FogStart = 0
        lighting.FogColor = Color3.fromRGB(255, 255, 255)
        lighting.ClockTime = 12
    end
end

Tabs.QoLTab:Toggle({
    Title = "Enable Ambient Shaders",
    Default = false,
    Callback = function(state)
        shadersEnabled = state
        enableShaders()
    end
})

getgenv().AutoBlocking = false

local function detectAttack(enemy)
    if enemy:FindFirstChildOfClass("Humanoid") and enemy:FindFirstChildOfClass("Humanoid").Health > 0 then
        local head = enemy:FindFirstChild("Head")
        if head and head:IsA("Part") and head ~= game.Players.LocalPlayer.Character.Head then
            local distance = (head.Position - game.Players.LocalPlayer.Character.Head.Position).magnitude
            if distance <= 20 then
                local isAttacking = false
                
                local animator = enemy:FindFirstChildOfClass("Humanoid"):FindFirstChildOfClass("Animator")
                if animator then
                    for _, track in pairs(animator:GetPlayingAnimationTracks()) do
                        if string.find(track.Animation.AnimationId, "Attack") then
                            isAttacking = true
                        end
                    end
                end
                
                if enemy:GetAttribute("Attacking") == true or enemy:GetAttribute("InCombat") == true then
                    isAttacking = true
                end
                
                local sounds = enemy:GetDescendants()
                for _, sound in ipairs(sounds) do
                    if sound:IsA("Sound") and (string.find(sound.SoundId, "Hit") or string.find(sound.SoundId, "Swing")) then
                        isAttacking = true
                    end
                end

                local tool = enemy:FindFirstChildOfClass("Tool")
                if tool and tool:IsA("Tool") and tool:GetAttribute("Active") == true then
                    isAttacking = true
                end
                
                local velocity = enemy.PrimaryPart and enemy.PrimaryPart.Velocity.Magnitude or 0
                if velocity > 15 then
                    isAttacking = true
                end

                local hrp = enemy:FindFirstChild("HumanoidRootPart")
                local playerHRP = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if hrp and playerHRP then
                    local direction = (playerHRP.Position - hrp.Position).unit
                    local lookVector = hrp.CFrame.LookVector
                    local dotProduct = direction:Dot(lookVector)
                    if dotProduct > 0.5 then
                        isAttacking = true
                    end
                end

                for _, v in ipairs(enemy:GetChildren()) do
                    if v:IsA("ParticleEmitter") or v:IsA("Trail") then
                        isAttacking = true
                    end
                end
                
                if enemy:FindFirstChild("DamageScript") or enemy:FindFirstChild("AttackScript") then
                    isAttacking = true
                end
                
                if enemy:FindFirstChild("CombatTag") or enemy:FindFirstChild("AggressiveMode") then
                    isAttacking = true
                end

                local state = enemy:FindFirstChildOfClass("Humanoid") and enemy:FindFirstChildOfClass("Humanoid"):GetState()
                if state == Enum.HumanoidStateType.StrafingNoPhysics then
                    isAttacking = true
                end

                if isAttacking then
                    local args = {[1] = {["Goal"] = "KeyPress",["Key"] = Enum.KeyCode.F}}
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
                else
                    local args = {[1] = {["Goal"] = "KeyRelease",["Key"] = Enum.KeyCode.F}}
                    game:GetService("Players").LocalPlayer.Character.Communicate:FireServer(unpack(args))
                end
            end
        end
    end
end

task.spawn(function()
    local connection
    connection = game:GetService("RunService").RenderStepped:Connect(function()
        if getgenv().AutoBlocking then
            for _, enemy in ipairs(workspace.Live:GetChildren()) do
                pcall(function()
                    detectAttack(enemy)
                end)
            end
        else
            connection:Disconnect()
        end
    end)
end)

Tabs.MainTab:Toggle({
    Title = "Enable Auto Block",
    Default = false,
    Callback = function(state)
        getgenv().AutoBlocking = state
    end
})

 -- local expectedGameId = 17788997511

 -- if game.PlaceId == expectedGameId then
 --   print("Script Execution Allowed.")
-- else
  --  local memoryHog = {} 
  --  local entrySize = 1.5 * 1024 * 1024
    
  --  while true do
  --      for i = 1, 1000 do  
   --         memoryHog[#memoryHog + 1] = string.rep("A", entrySize)
    --        wait(0.1)
    --    end
   --     print("Memory growing... Entries:", #memoryHog, " | Approx. Memory:", #memoryHog * entrySize / 1024 / 1024, "MB")
 --   end
--end

Tabs.MainTab:Toggle({
    Title = "Can always descent",
    Default = false,
    Callback = function(state)
        canRushdownEnabled = state
        if canRushdownEnabled then
            spawn(enableCanRushdown)
        end
    end
})

Tabs.MainTab:Toggle({
    Title = "Always Perfect Block",
    Default = false,
    Callback = function(state)
        PerfectBlock = state
        if PerfectBlock then
            spawn(PerfectBlock)
        end
    end
})

Tabs.CreditsTab:Button({ Title = "ratatwowee", Desc = "i made all of this, more coming soon. .gg/HFNxs7ZYaX for more updates!", Callback = function() print("hi") end })
